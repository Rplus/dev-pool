@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@mixin v-unit($prop, $length) {
    #{$prop}: strip-units($length) * .25rem;
    #{$prop}: $length;
}

$unit-size: 12vmin;
$animation-time: 2.4s;
$unit-colors: (
    #f7b62c,
    #81c540,
    #00a396,
    #1673bb,
    #612e8d,
    #c22286,
    #ea225e,
    #eb5a35
);

// non-used
$unit-color-group: (
    (1            ),
    (2  6         ),
    (3  7 11      ),
    (4  8 12 16   ),
    (5  9 13 17 21),
    (  10 14 18 22),
    (     15 19 23),
    (        20 24),
    (           25),
);

@keyframes rotate {
    0%   { transform: rotateZ( 45deg); }
    25%  { transform: rotateZ(135deg); }
    50%  { transform: rotateZ(225deg); }
    75%  { transform: rotateZ(315deg); }
    100% { transform: rotateZ(405deg); }
}

@keyframes rotate2 {
    0%   { transform: rotateZ( 45deg); }
    25%  { transform: rotateZ( 45deg); }
    50%  { transform: rotateZ(135deg); }
    75%  { transform: rotateZ(135deg); }
    100% { transform: rotateZ(225deg); }
}

@keyframes rotate3 {
    0%, 50%, 100% { transform: rotateZ( 45deg); }
    25%, 75%      { transform: rotateZ(-45deg); }
}

.unit {
    float: left;
    width: $unit-size;
    height: $unit-size;
    border: ($unit-size / 2) solid transparent;
    border-top-color: currentColor;
    border-bottom-color: currentColor;
    border-radius: 50%;
    color: #000;
    transform: rotateZ(45deg);
    animation: rotate $animation-time infinite cubic-bezier(.75,0,.25,1) reverse;

    &:nth-of-type(2n+1) {
        animation-delay: -.25 * $animation-time;
    }

    &:nth-of-type(10n+6),
    &:nth-of-type(10n+7),
    &:nth-of-type(10n+8),
    &:nth-of-type(10n+9),
    &:nth-of-type(10n+10) {
        animation-direction: normal;
        color: #900;

        &:nth-of-type(2n) {
            animation-delay: -.25 * $animation-time;
        }
    }

    &:nth-of-type(2n) {
        animation-name: rotate2;
        color: #00f;
    }

    &:nth-of-type(4n+1)  { color: nth($unit-colors, 1); }
    &:nth-of-type(4n+2)  { color: nth($unit-colors, 2); }
    &:nth-of-type(4n+3)  { color: nth($unit-colors, 3); }
    &:nth-of-type(4n+4)  { color: nth($unit-colors, 4); }
    &:nth-of-type(4n+5)  { color: nth($unit-colors, 5); animation-name: rotate3;}
    &:nth-of-type(4n+10) { color: nth($unit-colors, 6); }
    &:nth-of-type(4n+15) { color: nth($unit-colors, 7); }
    &:nth-of-type(4n+20) { color: nth($unit-colors, 8); }
    &:nth-of-type(4n+25) { color: nth($unit-colors, 1); }
}

.box {
    position: relative;
    width: $unit-size * 5;
    height: $unit-size * 5;
    margin: auto;
    display: inline-block;
}

.box--inner {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(#000, 1);
    clip: rect($unit-size * .5, $unit-size * 4.5, $unit-size * 4.5, $unit-size * .5);
}


///
/// reset style
///

*,
*::before,
*::after {
    box-sizing: border-box;
}

body {
    position: relative;
    margin: 0;
    min-height: 100vh;
    padding-top: 1px;
    text-align: center;
    background-color: #fff;
}

.intro {
    width: 80%;
    max-width: $unit-size * 8;
    padding-bottom: 1rem;
    margin: .5em auto 1em;
    text-transform: capitalize;
    border-bottom: 1px dashed #999;

    small {
        display: block;
        opacity: .5;
        font-style: italic;
        text-transform: none;
    }
}

.info {
    position: absolute;
    bottom: 0;
    right: 0;
    margin: 1em;
    font-size: .9em;
    font-style: italic;
    font-family: serif;
    text-align: right;
    color: #666;

    a {
        opacity: .5;
    }
}
