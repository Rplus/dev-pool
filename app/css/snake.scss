$box-size: 240px;
$box-size-number: $box-size / 1px;
$circle-count: 20;
$colors: rgba(#d2d200,1), rgba(#06f,1), #000, #fff;
$reduce-ratio: .8;

///
/// major style
///

// functions to urlencode the svg string
// source from: http://codepen.io/philippkuehn/pen/zGEjxB
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@function url-encode($string) {
  $map: (
    "%": "%25",
    "<": "%3C",
    ">": "%3E",
    " ": "%20",
    "!": "%21",
    "*": "%2A",
    "'": "%27",
    '"': "%22",
    "(": "%28",
    ")": "%29",
    ";": "%3B",
    ":": "%3A",
    "@": "%40",
    "&": "%26",
    "=": "%3D",
    "+": "%2B",
    "$": "%24",
    ",": "%2C",
    "/": "%2F",
    "?": "%3F",
    "#": "%23",
    "[": "%5B",
    "]": "%5D"
  );
  $new: $string;
  @each $search, $replace in $map {
    $new: str-replace($new, $search, $replace);
  }
  @return $new;
}

@function inline-svg($string) {
  @return url('data:image/svg+xml;utf8,#{url-encode($string)}');
}

$ellipses: ();

@for $i from 1 through $circle-count * 2 {
  $ellipses: join($ellipses, '<use xlink:href="#systemthread" transform="translate(#{$box-size-number / 2} #{$box-size-number / 2}) rotate(#{$i * 180 / $circle-count})" style="fill: #{nth($colors, ($i % 2) + 1)}" />');
}

$svg: '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" width="' + $box-size-number + '" height="' + $box-size-number + '"><defs><ellipse id="systemthread" cx="0" cy="#{$box-size-number * .9 * .5}" rx="#{$box-size-number * .025}" ry="#{$box-size-number * .05}" /></defs>' + $ellipses + '</svg>';

/////

.circle {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: auto;
  width: 100% * $reduce-ratio;
  height: 100% * $reduce-ratio;
  border-radius: 50%;
  background-color: #fff;
  background-image:
    // url('data:image/svg+xml;utf8,#{$svg}'), // for debug, work on -webkit- only
    inline-svg($svg),
    repeating-conic-gradient(
      nth($colors, 3) 0 #{180deg / $circle-count},
      nth($colors, 4) 0 #{360deg / $circle-count}
    );
  background-size: 100%;

  &:nth-of-type(even) {
    transform: rotate(180deg / $circle-count);
  }

  @for $i from 1 through $circle-count {
    &:nth-of-type(#{$i}) {
      transform: rotate($i % 2 * 180deg / $circle-count);
      z-index: $circle-count - $i;
    }
  }

  // for first circle, set full size
  .box > & {
    width: 100%;
    height: 100%;
  }
}

.box {
  position: relative;
  float: left;
  width: $box-size;
  height: $box-size;
  margin: 0 auto;

  @for $i from 13 through 18 {
    &:nth-of-type(#{$i}) {
      position: absolute;
      top: $box-size * (($i - 12.5) % 2);
      left: $box-size * (($i - 12.5) % 3);
    }
  }

}

.box-matrix {
  position: relative;
  width: $box-size * 4;
  height: $box-size * 3;
  margin: auto;
}



///
/// reset style
///

*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  position: relative;
  margin: 0;
  min-height: 90vh;
  padding-top: 1px;
  text-align: center;
  color: #333;
}

.intro {
  width: 80%;
  max-width: 30rem;
  padding-bottom: 1rem;
  margin: .5em auto 1em;
  text-transform: capitalize;
  border-bottom: 1px dashed #999;

  small {
    display: block;
    opacity: .5;
    font-style: italic;
    text-transform: none;
  }
}

.info {
  position: absolute;
  bottom: 0;
  right: 0;
  margin: 1em;
  font-size: .9em;
  font-style: italic;
  font-family: serif;
  text-align: right;
  color: #999;

  a {
    color: inherit;
  }
}
