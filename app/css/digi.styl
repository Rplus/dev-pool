$digi-size    = 3rem;
$border-width = $digi-size * .3;
$border-color = #666;

$digi = ((0 1 0 0) (0 1 0 0)), // 1
    ((1 1 1 0) (1 0 1 1)), // 2
    ((1 1 1 0) (1 1 1 0)), // 3
    ((0 1 1 1) (1 1 0 0)), // 4
    ((1 0 1 1) (1 1 1 0)), // 5
    ((1 0 1 1) (1 1 1 1)), // 6
    ((1 1 0 0) (0 1 0 0)), // 7
    ((1 1 1 1) (1 1 1 1)), // 8
    ((1 1 1 1) (1 1 1 0)), // 9
    ((1 1 1 1) (1 1 0 1)), // 10, A
    ((0 0 1 1) (1 1 1 1)), // 11, b
    ((0 0 1 0) (1 0 1 1)), // 12, c
    ((0 1 1 0) (1 1 1 1)), // 13, d
    ((1 0 1 1) (1 0 1 1)), // 14, E
    ((1 0 1 1) (1 0 0 1)), // 15, f
    ((1 1 0 1) (0 1 1 1)); // 0

$digi-dir = 'top', 'right', 'bottom', 'left';

$border-top {
  border-top-color: $border-color;
}

$border-right {
  border-right-color: $border-color;
}

$border-bottom {
  border-bottom-color: $border-color;
}

$border-left {
  border-left-color: $border-color;
}

border-active($dir = 'top', $type = 'include') {
  if ($type == 'include') {
    // for include
    // recommending works with status switching by css
    border-{$dir}-color: $border-color;
  } else {
    // for extend, group selectors together
    // recommending works with className switching by javascript
    @extend $border-{$dir};
  }
}

digiNum($num) {
  &::before {
    $i = 0;
    for $v in $digi[$num - 1][0] {
      if ($v != 0) {
        border-active($digi-dir[$i]);
      }
      $i = $i +1;
    }
  }

  &::after {
    $i = 0;
    for $v in $digi[$num - 1][1] {
      if ($v != 0) {
        border-active($digi-dir[$i]);
      }
      $i = $i +1;
    }
  }
}



.digi {
  width: $digi-size;
  margin: 2rem auto 0;

  &::before,
  &::after {
    content: "";
    display: block;
    height: $digi-size * 1;
    border: $border-width solid rgba(#000, .1);
    border-radius: .25rem;
    transition: border-color .3s;
  }

  &::before {
    border-bottom-width: ($border-width * .5);
  }

  &::after {
    border-top-width: ($border-width * .5);
  }

  for $ii in (0..15) {

    $bi3 = ( $ii %16 / 8 >= 1) ? ':checked' : ':not(:checked)';
    $bi2 = ( $ii % 8 / 4 >= 1) ? ':checked' : ':not(:checked)';
    $bi1 = ( $ii % 4 / 2 >= 1) ? ':checked' : ':not(:checked)';
    $bi0 = ( $ii % 2 / 1 == 1) ? ':checked' : ':not(:checked)';

    #bi3{$bi3} ~ #bi2{$bi2} ~ #bi1{$bi1} ~ #bi0{$bi0} ~ & {
      digiNum($ii);

      // // for debug
      // &:hover::after {
      //     content: "" +$ii;
      //     color: rgba(#000, .5);
      // }
    }
  }
}



// custom checkbox style
input[type="checkbox"] {
  width: 0;
  height: 0;
  margin: 0;
  padding: 0;
  border: none;
}

label[for] {
  display: inline-block;
  cursor: pointer;

  &::before {
    content: attr(data-value);
    display: block;
    vertical-align: middle;
    width: 3em;
    height: @width;
    margin-right: .2em;
    border: .25em double rgba(#000, .3);
    border-radius: 20%;
    line-height: (@width - .5em);
    font-family: monospace;

    input:checked + & {
      border-style: solid;
      background-color: rgba(#ff9, .7);
    }
  }

  &:active {
    background-color: #ff9;
  }
}


// reset & common style
body {
  margin: 0 auto;
  text-align: center;
  box-sizing: border-box;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

h2 {
  font-family: serif;
  padding-bottom: 20px;
  border-bottom: 1px dashed #ccc;
}

#info {
  position: absolute;
  bottom: 0;
  right: 0;
  padding: 3px 5px;
  font-style: italic;
  font-family: serif;
  text-align: right;
  color: #999;

  a {
    color: inherit;
  }
}
